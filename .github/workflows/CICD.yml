# This is a basic workflow to help you get started with Actions

  name: Master CI

  # Controls when the workflow will run
  on:
    # Triggers the workflow on push or pull request events but only for the "main" branch
    pull_request:
      branches: [ "main" ]
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:
  # A workflow run is made up of one or more jobs that can run sequentially or in parallel
  jobs:
    # This workflow contains a single job called "build"
    build:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3
        - name: setup jdk
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'adopt'
        - name: Write value to Properties-file
          uses: christian-draeger/write-properties@1.1.0
          with:
            path: './springboot/src/main/resources/application.properties'
            property: |
              'spring.datasource.url'
              'spring.datasource.username'
              'spring.datasource.password'
            value: |
              'jdbc:postgresql://parceltntdb.cjytmbar7arv.us-east-1.rds.amazonaws.com:5432/postgres'
              'postgres'
              'postgres'
          env:
            DB_URL: ${{ secrets.DATASOURCE_URL }}
            DB_USER: ${{ secrets.DATASOURCE_USERNAME }}
            DB_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
        - name: Read value from Properties-file
          id: read_property
          uses: christian-draeger/read-properties@1.1.1
          with:
            path: './springboot/src/main/resources/application.properties'
            properties: 'spring.datasource.url spring.datasource.username spring.datasource.password'
        - name: Do something with your bumped release version
          run: echo ${{ steps.read_property.outputs.spring.datasource.url }}
          # will print "the value of 'the.key.of.a.property'"
        - name: compile
          run: cd springboot; mvn --batch-mode install
          #Build the application using Maven
        - name: Upload JAR
          #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
          uses: actions/upload-artifact@v2
          with:
            #Set artifact name
            name: artifact
            #From this path
            path: springboot/target/openapi-spring-1.22.1.jar
    # Deploy's job
    deploy:
      # Depends on build's job
      needs: build
      name: CD
      #Run on Ubuntu using the latest version
      runs-on: ubuntu-latest
      steps:
        - name: Download JAR
          #Download the artifact which was uploaded in the build's job
          uses: actions/download-artifact@v2
          with:
            name: artifact
        #Deploy the artifact (JAR) into AWS Beanstalk
        - name: Deploy to EB
          uses: einaregilsson/beanstalk-deploy@v13
          with:
            aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
            use_existing_version_if_available: true
            application_name: swkom_parceltntv2_kratzer
            environment_name: Swkomparceltntv2kratzer-env-1
            version_label: ${{github.SHA}}
            region: us-east-1
            deployment_package: openapi-spring-1.22.1.jar
